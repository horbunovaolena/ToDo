namespace ToDo.Api;

/// <summary>
/// Основна модель сутності завдання (ToDo) що представляє окремий елемент списку справ.
/// Містить всю необхідну інформацію для управління завданнями включаючи опис, пріоритет, терміни та теги.
/// </summary>
/// <remarks>
/// Клас Todo є центральною сутністю додатку що зберігається в базі даних через Entity Framework Core.
/// Підтримує повний життєвий цикл завдання від створення до завершення з можливістю категоризації через теги.
/// 
/// Основні можливості:
/// - Автоматичне встановлення дати створення
/// - Підтримка пріоритетів завдань
/// - Система тегування для категоризації
/// - Опціональні терміни виконання
/// - Зручні методи для роботи з тегами
/// </remarks>
public class Todo
{
    /// <summary>
    /// Унікальний ідентифікатор завдання.
    /// Автоматично генерується Entity Framework Core при збереженні в базу даних.
    /// </summary>
    /// <value>
    /// Ціле число що є первинним ключем у базі даних.
    /// Значення 0 вказує на нове завдання що ще не збережене.
    /// </value>
    public int Id { get; set; }

    /// <summary>
    /// Назва або заголовок завдання.
    /// Основний текст що описує суть завдання для користувача.
    /// </summary>
    /// <value>
    /// Рядок з назвою завдання або null якщо не встановлено.
    /// Рекомендується завжди встановлювати значимий заголовок.
    /// </value>
    public string? Name { get; set; }

    /// <summary>
    /// Прапорець що вказує чи завершене завдання.
    /// Використовується для відстеження прогресу та фільтрації завдань.
    /// </summary>
    /// <value>
    /// true якщо завдання виконане, false якщо ще в процесі.
    /// За замовчуванням встановлюється як false для нових завдань.
    /// </value>
    public bool IsComplete { get; set; }

    /// <summary>
    /// Детальний опис завдання з додатковою інформацією.
    /// Надає можливість додати контекст та деталі до основної назви.
    /// </summary>
    /// <value>
    /// Рядок з описом завдання або null якщо опис не потрібен.
    /// Може містити багаторядковий текст з форматуванням.
    /// </value>
    public string? Description { get; set; }

    /// <summary>
    /// Дата та час створення завдання з урахуванням часового поясу.
    /// Автоматично встановлюється при створенні нового екземпляру.
    /// </summary>
    /// <value>
    /// DateTimeOffset зі значенням UTC моменту створення об'єкту.
    /// Використовує DateTimeOffset.UtcNow для точного відстеження часу.
    /// </value>
    public DateTimeOffset CreatedDate { get; set; } = DateTimeOffset.UtcNow;

    /// <summary>
    /// Опціональна дата до якої завдання повинно бути виконане.
    /// Використовується для планування та визначення прострочених завдань.
    /// </summary>
    /// <value>
    /// DateOnly з датою дедлайну або null якщо термін не встановлений.
    /// Використовує DateOnly для представлення тільки дати без часу.
    /// </value>
    public DateOnly? DueDate { get; set; }

    /// <summary>
    /// Пріоритет завдання що визначає його важливість відносно інших завдань.
    /// Використовується для сортування та візуального відображення.
    /// </summary>
    /// <value>
    /// Значення енуму Priority (Low, Medium, High).
    /// За замовчуванням встановлюється Medium для збалансованого підходу.
    /// </value>
    public Priority Priority { get; set; } = Priority.Medium;

    /// <summary>
    /// Список тегів для категоризації та фільтрації завдань.
    /// Дозволяє групувати завдання за темами, проектами або іншими критеріями.
    /// </summary>
    /// <value>
    /// Список рядків що представляють теги завдання.
    /// Ініціалізується пустим списком для уникнення null reference винятків.
    /// </value>
    public List<string> Tags { get; set; } = new List<string>();

    /// <summary>
    /// Додає новий тег до завдання з автоматичною нормалізацією.
    /// Використовує методи розширення для уніфікованої обробки тегів.
    /// </summary>
    /// <param name="tag">Рядок тегу для додавання до завдання.</param>
    /// <remarks>
    /// Метод використовує extension methods з TagHelper для:
    /// - Нормалізації регістру тегу
    /// - Запобігання дублікатів
    /// - Очищення пробілів
    /// </remarks>
    public void AddTag(string tag)
    {
        Tags.AddTag(tag);
    }

    /// <summary>
    /// Видаляє тег з завдання якщо він присутній.
    /// Використовує методи розширення для безпечного видалення.
    /// </summary>
    /// <param name="tag">Рядок тегу для видалення з завдання.</param>
    /// <remarks>
    /// Метод виконує пошук тегу без урахування регістру та видаляє перший збіг.
    /// Якщо тег не знайдено, операція ігнорується без помилок.
    /// </remarks>
    public void RemoveTag(string tag)
    {
        Tags.RemoveTag(tag);
    }

    /// <summary>
    /// Перевіряє чи містить завдання вказаний тег.
    /// Виконує пошук без урахування регістру символів.
    /// </summary>
    /// <param name="tag">Рядок тегу для пошуку в завданні.</param>
    /// <returns>
    /// true якщо тег знайдено в списку тегів завдання, false якщо не знайдено.
    /// </returns>
    /// <remarks>
    /// Пошук виконується без урахування регістру для зручності користувача.
    /// Використовує extension methods для уніфікованої логіки пошуку.
    /// </remarks>
    public bool HasTag(string tag)
    {
        return Tags.HasTag(tag);
    }
}
