using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace ToDo.Api.Controllers;

/// <summary>
/// REST API –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ ToDo.
/// –ù–∞–¥–∞—î –ø–æ–≤–Ω–∏–π –Ω–∞–±—ñ—Ä CRUD –æ–ø–µ—Ä–∞—Ü—ñ–π –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ —á–µ—Ä–µ–∑ HTTP endpoints.
/// </summary>
[ApiController]
[Route("todoitems")]
public class ToDoController(TodoDb db) : ControllerBase
{
    /// <summary>
    /// –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.
    /// </summary>
    /// <param name="pageNumber">–ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 1)</param>
    /// <param name="pageSize">–†–æ–∑–º—ñ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 10)</param>
    /// <param name="sortBy">–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (name, priority, duedate, iscomplete, createddate)</param>
    /// <param name="sortDirection">–ù–∞–ø—Ä—è–º–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (asc –∞–±–æ desc)</param>
    /// <param name="priority">–§—ñ–ª—å—Ç—Ä –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º</param>
    /// <param name="isComplete">–§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è</param>
    /// <param name="searchQuery">–ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –Ω–∞–∑–≤–∏ —Ç–∞ –æ–ø–∏—Å—É</param>
    /// <returns>
    /// ActionResult —â–æ –º—ñ—Å—Ç–∏—Ç—å paginated —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏.
    /// HTTP 200 OK –∑ –æ–±'—î–∫—Ç–æ–º —â–æ –º—ñ—Å—Ç–∏—Ç—å data, pageNumber, pageSize, totalCount, totalPages, hasNextPage, hasPreviousPage.
    /// </returns>
    /// <remarks>
    /// <strong>–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:</strong>
    /// - GET /todoitems?pageNumber=1&pageSize=5 - –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è
    /// - GET /todoitems?sortBy=priority&sortDirection=desc - —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
    /// - GET /todoitems?priority=3 - —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –≤–∏—Å–æ–∫–æ–≥–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É  
    /// - GET /todoitems?searchQuery=—Ä–æ–±–æ—Ç–∞ - –ø–æ—à—É–∫ –∑–∞–≤–¥–∞–Ω–Ω—å
    /// - GET /todoitems?pageNumber=2&pageSize=5&sortBy=duedate&sortDirection=asc&priority=3&searchQuery=–ø—Ä–æ–µ–∫—Ç - –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è –≤—Å—ñ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    /// </remarks>
    [HttpGet]
    public async Task<ActionResult<List<Todo>>> GetPaginatedToDos(string query = "", int pageNumber = 1, int pageSize = 10)
    {
   
        List<Todo> allTodos = await db.Todos.ToListAsync();

        // üîç FILTERING in `allTodos`
        //if —É–º–æ–≤–∞
        //–∫–æ–¥ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —è–∫—â–æ —É–º–æ–≤–∞ —ñ—Å—Ç–∏–Ω–Ω–∞

        List<Todo> filteredTodos = new List<Todo>();

        foreach (Todo todo in allTodos)
        {
            if (todo.Name.Contains(query, StringComparison.InvariantCultureIgnoreCase)
                || todo.Description.Contains(query, StringComparison.InvariantCultureIgnoreCase))
            {
                filteredTodos.Add(todo);
            }
        }


        // üìÑ PAGINATION
        // | pageNumber | pageSize | result
        // | 1          | 10       | –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ 0 —ñ –≤–µ—Ä–Ω—É—Ç–∏ {pageSize} –∑–∞–ø–∏—Å—ñ–≤
        // | 2          | 10       | –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ {pageSize} —ñ –≤–µ—Ä–Ω—É—Ç–∏ {pageSize}
        // | 3          | 10       | –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ 2 * {pageSize} —ñ –≤–µ—Ä–Ω—É—Ç–∏ {pageSize}
        // | 4          | 10       | –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ 3 * {pageSize} —ñ –≤–µ—Ä–Ω—É—Ç–∏ {pageSize}
        List<Todo> paginatedTODOs = filteredTodos
            .Skip((pageNumber - 1) * pageSize)
            .Take(pageSize)
            .ToList();

        return Ok(paginatedTODOs);

    }

    /// <summary>
    /// –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –±–µ–∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó (–¥–ª—è backward compatibility).
    /// –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤–Ω—É –∫–æ–ª–µ–∫—Ü—ñ—é –∑–∞–≤–¥–∞–Ω—å –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.
    /// </summary>
    /// <returns>
    /// ActionResult —â–æ –º—ñ—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å ToDo —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON.
    /// HTTP 200 OK –∑ –º–∞—Å–∏–≤–æ–º –æ–±'—î–∫—Ç—ñ–≤ Todo –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ —è–∫—â–æ –∑–∞–≤–¥–∞–Ω—å –Ω–µ–º–∞—î.
    /// </returns>
    /// <remarks>
    /// <strong>Backward Compatibility:</strong>
    /// –¶–µ–π endpoint –∑–±–µ—Ä—ñ–≥–∞—î —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑—ñ —Å—Ç–∞—Ä–∏–º –∫–æ–¥–æ–º —è–∫–∏–π –æ—á—ñ–∫—É—î –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –±–µ–∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó.
    /// </remarks>
    [HttpGet("all")]
    public async Task<ActionResult<List<Todo>>> GetAllTodosWithoutPagination()
    {
        List<Todo> todos = await db.Todos.ToListAsync();
        return Ok(todos);
    }

    /// <summary>
    /// –û—Ç—Ä–∏–º—É—î —Ç—ñ–ª—å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    /// –§—ñ–ª—å—Ç—Ä—É—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º IsComplete = true.
    /// </summary>
    /// <returns>
    /// ActionResult —â–æ –º—ñ—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON.
    /// HTTP 200 OK –∑ –º–∞—Å–∏–≤–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö Todo –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤.
    /// </returns>
    /// <remarks>
    /// <strong>–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:</strong>
    /// - –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    /// - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç
    /// - –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    /// - –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    /// </remarks>
    [HttpGet("complete")]
    public async Task<ActionResult<List<Todo>>> GetCompleteTodos()
    {
        List<Todo> completedTodos = await db.Todos
            .Where(t => t.IsComplete)
            .ToListAsync();

        return Ok(completedTodos);
    }

    /// <summary>
    /// –û—Ç—Ä–∏–º—É—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –π–æ–≥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º.
    /// –í–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –π–æ–≥–æ –∞–±–æ –ø–æ–º–∏–ª–∫—É 404.
    /// </summary>
    /// <param name="id">–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É.</param>
    /// <returns>
    /// ActionResult —â–æ –º—ñ—Å—Ç–∏—Ç—å –∑–Ω–∞–π–¥–µ–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∞–±–æ HTTP 404 —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.
    /// </returns>
    [HttpGet("{id}")]
    public async Task<ActionResult<Todo>> GetTodo(int id)
    {
        Todo? todo = await db.Todos.FindAsync(id);
        if (todo == null)
        {
            return NotFound();
        }

        return Ok(todo);
    }

    /// <summary>
    /// –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.
    /// –ü—Ä–∏–π–º–∞—î –¥–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ HTTP Body —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î —ó—Ö –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è–º ID.
    /// </summary>
    /// <param name="todo">–û–±'—î–∫—Ç Todo –∑ –¥–∞–Ω–∏–º–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è.</param>
    /// <returns>
    /// ActionResult –∑ —Å—Ç–≤–æ—Ä–µ–Ω–∏–º –∑–∞–≤–¥–∞–Ω–Ω—è–º —Ç–∞ HTTP 201 Created —Å—Ç–∞—Ç—É—Å–æ–º.
    /// –í–∫–ª—é—á–∞—î Location header –∑ URL –Ω–æ–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å—É.
    /// </returns>
    /// <remarks>
    /// <strong>HTTP Method:</strong> POST
    /// <strong>Route:</strong> /todoitems
    /// <strong>Request Body:</strong> JSON –æ–±'—î–∫—Ç Todo
    /// <strong>Response:</strong> 201 Created + JSON –æ–±'—î–∫—Ç + Location header
    /// 
    /// <strong>–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É:</strong>
    /// <code>
    /// POST /todoitems
    /// Content-Type: application/json
    /// 
    /// {
    ///   "name": "–í–∏–≤—á–∏—Ç–∏ ASP.NET Core",
    ///   "description": "–ü—Ä–æ–π—Ç–∏ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Ç—É—Ç–æ—Ä—ñ–∞–ª",
    ///   "priority": "High",
    ///   "dueDate": "2024-02-01",
    ///   "tags": ["–Ω–∞–≤—á–∞–Ω–Ω—è", "—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó"]
    /// }
    /// </code>
    /// </remarks>
    [HttpPost]
    public async Task<ActionResult<Todo>> CreateTodo(Todo todo)
    {
        db.Todos.Add(todo);
        await db.SaveChangesAsync();
        return Created($"/todoitems/{todo.Id}", todo);
    }

    /// <summary>
    /// –û–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏.
    /// –ó–∞–º—ñ–Ω—é—î –≤—Å—ñ –æ–Ω–æ–≤–ª—é–≤–∞–Ω—ñ –ø–æ–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è –¥–∞–Ω–∏–º–∏ –∑ –∑–∞–ø–∏—Ç—É.
    /// </summary>
    /// <param name="id">–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏.</param>
    /// <param name="inputTodo">–û–±'—î–∫—Ç Todo –∑ –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.</param>
    /// <returns>
    /// HTTP 204 No Content –ø—Ä–∏ —É—Å–ø—ñ—à–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∞–±–æ 404 Not Found —è–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ —ñ—Å–Ω—É—î.
    /// </returns>
    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateTodo(int id, Todo inputTodo)
    {
        Todo? todo = await db.Todos.FindAsync(id);

        if (todo is null)
        {
            return NotFound();
        }

        todo.Name = inputTodo.Name;
        todo.IsComplete = inputTodo.IsComplete;
        todo.Description = inputTodo.Description;
        todo.DueDate = inputTodo.DueDate;
        todo.Priority = inputTodo.Priority;
        todo.Tags = inputTodo.Tags;

        await db.SaveChangesAsync();

        return NoContent();
    }

    /// <summary>
    /// –í–∏–¥–∞–ª—è—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º.
    /// –í–∏–∫–æ–Ω—É—î –ø–æ–≤–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –±–µ–∑ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è.
    /// </summary>
    /// <param name="id">–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏.</param>
    /// <returns>
    /// HTTP 204 No Content –ø—Ä–∏ —É—Å–ø—ñ—à–Ω–æ–º—É –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∞–±–æ 404 Not Found —è–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ —ñ—Å–Ω—É—î.
    /// </returns>
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteTodo(int id)
    {
        Todo? todo = await db.Todos.FindAsync(id);
        if (todo == null)
        {
            return NotFound();
        }

        db.Todos.Remove(todo);
        await db.SaveChangesAsync();
        return NoContent();
    }
}
